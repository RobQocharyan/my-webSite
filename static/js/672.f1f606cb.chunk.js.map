{"version":3,"file":"static/js/672.f1f606cb.chunk.js","mappings":"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","sources":["Component/Common/FormsControls/FormControls.js","webpack://my-app/./src/Component/Profile/MyPosts/MyPosts.module.css?36f8","webpack://my-app/./src/Component/Profile/MyPosts/Post/Post.module.css?9b81","Component/Profile/MyPosts/Post/Post.jsx","Component/Profile/MyPosts/MyPosts.jsx","Component/Profile/MyPosts/MyPostsConteiner.jsx","webpack://my-app/./src/Component/Profile/ProfileInfo/ProfileInfo.module.css?7111","Component/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","Component/Profile/ProfileInfo/ProfileStatus.jsx","Component/Profile/ProfileInfo/ProfileDataForm.jsx","Component/Profile/ProfileInfo/ProfileInfo.jsx","Component/Profile/Profile.jsx","Component/Profile/ProfileContainer.jsx","utils/validators/validators.js","webpack://my-app/./src/Component/Common/FormsControls/FormControls.module.css?77d8"],"sourcesContent":["import React from \"react\";\r\nimport { Field } from \"redux-form\";\r\nimport classes from \"./FormControls.module.css\";\r\n\r\nconst FormControl = ({ input, meta: { touched, error }, children }) => {\r\n  const hasError = touched && error;\r\n  return (\r\n    <div className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}>\r\n      <div>{children}</div>\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Textarea = (props) => {\r\n  const { input, meta, child, ...restProps } = props;\r\n\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FormControl >\r\n  );\r\n};\r\n\r\nexport const Input = (props) => {\r\n  const { input, meta, child, element, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const CreateField = (\r\n  placeholder,\r\n  name,\r\n  validate,\r\n  component,\r\n  props = {},\r\n  text = \"\"\r\n) => {\r\n  return (\r\n    <div>\r\n      <Field\r\n        placeholder={placeholder}\r\n        name={name}\r\n        validate={validate}\r\n        component={component}\r\n        {...props}\r\n      />\r\n      {text}\r\n    </div>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"myPost\":\"MyPosts_myPost__CGx+Y\",\"posts\":\"MyPosts_posts__XQmi7\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__I3WIk\"};","import classes from \"./Post.module.css\";\r\nimport React from 'react';  \r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={classes.item}>\r\n      <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRbj6F59q51BqwKiBhCrcu9kWmoVXxceKCzsw&usqp=CAU\" alt=\"ads\" />\r\n      {props.message}\r\n      <div>\r\n        <span>Like {props.count}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport React from \"react\";\r\nimport { Field, reduxForm} from \"redux-form\";\r\nimport {\r\n  MaxLengthCreator,\r\n  required,\r\n} from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../Common/FormsControls/FormControls\";\r\n\r\nconst maxLength10 = MaxLengthCreator(10);\r\n\r\nconst MyPosts = React.memo((props) => {\r\n  let postElements = [...props.post].reverse().map((post) => {\r\n    return <Post key={post.id} message={post.message} count={post.count} />;\r\n  });\r\n\r\n  let onAddPostForm = (values) => {\r\n    props.onAddPost(values.newDialog);\r\n    values.newDialog=\"\";\r\n  };\r\n\r\n  return (\r\n    <div className={classes.myPost}>\r\n      <h2>my post</h2>\r\n      <MyPostsReduxForm onSubmit={onAddPostForm} />\r\n      <div className={classes.posts}>{postElements}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\n\r\nconst MyPostsRedux = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          placeholder=\"Write your post!!\"\r\n          component={Textarea}\r\n          name=\"newDialog\"\r\n          validate={[required, maxLength10]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst MyPostsReduxForm = reduxForm({ form: \"dialogAddPost\" })(MyPostsRedux);\r\nexport default MyPosts;\r\n","import { connect } from \"react-redux\";\r\nimport { addPostActionCreator } from \"../../../Redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    post: state.profilePage.postData,\r\n    newPostText: state.profilePage.newPostText,\r\n  };\r\n};\r\n \r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAddPost: (newDialog) => {\r\n      dispatch(addPostActionCreator(newDialog));\r\n    },\r\n  };\r\n};\r\nconst MyPostsConteiner = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsConteiner;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"ProfileInfo_content__H--11\",\"status\":\"ProfileInfo_status__ddsCv\",\"mainFoto\":\"ProfileInfo_mainFoto__TCPP6\",\"contact\":\"ProfileInfo_contact__arW61\"};","import React, { useEffect, useState } from \"react\";\r\nimport classes from \"./ProfileInfo.module.css\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n\r\n  const onStatusChange = (event) => {\r\n    setStatus(event.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.status}>\r\n      {!editMode && (\r\n        <div>\r\n         <b>Status</b>: <span onDoubleClick={activateEditMode}>\r\n            {props.status || \"---------------\"}\r\n          </span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            onChange={onStatusChange}\r\n            value={status}\r\n            onBlur={deactivateEditMode}\r\n            autoFocus={true}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from \"react\";\r\nimport classes from \"./ProfileInfo.module.css\";\r\n\r\nclass ProfileStatus extends React.Component {\r\n  satte = {\r\n    editMode: false,\r\n    status: this.props.status,\r\n  };\r\n\r\n  activateEditMode = () => {\r\n    this.setState({\r\n      editMode: true,\r\n    });\r\n  };\r\n\r\n  deactivateEditMode = () => {\r\n    this.setState({\r\n      editMode: false,\r\n    });\r\n    this.props.updateStatus(this.state.status);\r\n  };\r\n\r\n  onStatusChange = (event) => {\r\n    this.setStatus({\r\n      status: event.currentTarget.value,\r\n    });\r\n  };\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.status !== this.props.status) {\r\n      this.setState({\r\n        status: this.props.status,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={classes.status}>\r\n        {!this.state.editMode && (\r\n          <div>\r\n            <span onDoubleClick={this.activateEditMode}>\r\n              {this.props.status || \"---------------\"}\r\n            </span>\r\n          </div>\r\n        )}\r\n        {this.state.editMode && (\r\n          <div>\r\n            <input\r\n              onChange={this.onStatusChange}\r\n              value={this.state.status}\r\n              onBlur={this.deactivateEditMode.bind(this)}\r\n              autoFocus={true}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProfileStatus;\r\n","\r\nimport { reduxForm } from \"redux-form\";\r\nimport classes from \"./ProfileInfo.module.css\";\r\nimport style from \"../../Common/FormsControls/FormControls.module.css\";\r\nimport { CreateField, Input, Textarea } from \"../../Common/FormsControls/FormControls\";\r\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n\r\n      <div>\r\n        <button>save</button>\r\n      </div>\r\n      {error && <div className={style.formSummaryError}>{error}</div>}\r\n      <div>\r\n        <b>Full name</b>: {CreateField(\"Full name\", \"fullName\", [] ,Input)}\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job</b>:\r\n        {CreateField(\"\", \"lookingForAJob\", [],Input , { type: \"checkbox\" })}\r\n      </div>\r\n      <div>\r\n        <b>My professional skills</b>:\r\n        {CreateField(\r\n          \"My professional skills\",\r\n          \"lookingForAJobDescription\",\r\n          [],\r\n          Textarea, \r\n        )}\r\n      </div>\r\n      <div>\r\n        <b>About me</b>:{CreateField(\"About me\", \"aboutMe\", [],Textarea )}\r\n      </div>\r\n      <div>\r\n        <b>Contacts</b>:\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          return (\r\n            <div key={key} className={classes.contact}>\r\n              <b>\r\n                {key}:{CreateField(key, \"contacts.\" + key,[] ,Input )}\r\n              </b>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </form>\r\n\r\n  );\r\n};\r\nconst ProfileDataFormReduxForm = reduxForm({ form: \"edit-profile\" })(\r\n  ProfileDataForm\r\n);\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import React, { useState } from \"react\";\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\n\r\nimport classes from \"./ProfileInfo.module.css\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/img/user.jpg\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = ({\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  isOwner,\r\n  savePhoto,\r\n  saveProfile,\r\n}) => {\r\n\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const onMainPhotoSelected = (event) => {\r\n    if (event.target.files.length) {\r\n      savePhoto(event.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (formData) => {\r\n\r\n    saveProfile(formData).then(()=>{\r\n      setEditMode(false)\r\n    })\r\n    };\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.content}>\r\n        <img\r\n          src={profile.photos.large || userPhoto}\r\n          alt=\"images\"\r\n          className={classes.mainFoto}\r\n        />\r\n        {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\r\n\r\n        {editMode ? (\r\n          <ProfileDataForm\r\n            initialValues={profile}\r\n            profile={profile}\r\n            onSubmit={onSubmit}\r\n          />\r\n        ) : (\r\n          <ProfileData\r\n            profile={profile}\r\n            isOwner={isOwner}\r\n            goToEditMode={() => {\r\n              setEditMode(true);\r\n            }}\r\n          />\r\n        )}\r\n\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\r\n  return (\r\n    <div>\r\n      {isOwner && (\r\n        <div>\r\n          <button onClick={goToEditMode}>edit</button>\r\n        </div>\r\n      )}\r\n      <div>\r\n        <b>Full name</b>: {profile.fullName}\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n      </div>\r\n      {profile.lookingForAJob && (\r\n        <div>\r\n          <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n      )}\r\n      <div>\r\n        <b>About me</b>: {profile.aboutMe}\r\n      </div>\r\n      <div>\r\n        <b>Contacts</b>:{\" \"}\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          return (\r\n            <Contact\r\n              key={key}\r\n              contactTitle={key}\r\n              contactValue={profile.contacts[key]}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n  return (\r\n    <div className={classes.contact}>\r\n      <b>{contactTitle}</b>: {contactValue}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","\r\nimport React from 'react';  \r\n\r\nimport MyPostsConteiner from \"./MyPosts/MyPostsConteiner\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nconst Profile = (props) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo savePhoto={props.savePhoto}  isOwner={props.isOwner}  profile={props.profile} status={props.status} updateStatus={props.updateStatus} saveProfile={props.saveProfile} />\r\n      <MyPostsConteiner  />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getStatus,\r\n  getUsersProfile,\r\n  savePhoto,\r\n  saveProfile,\r\n  updateStatus,\r\n} from \"../../Redux/profile-reducer\";\r\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\r\nimport Profile from \"./Profile\";\r\nimport { compose } from \"redux\";\r\n\r\nfunction withRouter(Component) {\r\n  function ComponentWithRouterProp(props) {\r\n    let location = useLocation();\r\n    let navigate = useNavigate();\r\n    let params = useParams();\r\n    return <Component {...props} router={{ location, navigate, params }} />;\r\n  }\r\n\r\n  return ComponentWithRouterProp;\r\n}\r\nclass ProfileContainer extends React.Component {\r\n\r\n  refreshProfile() {\r\n\r\n    let userId = this.props.router.params.userId;\r\n\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        // this.props.history.push(\"/login\"); \r\n      }\r\n    }\r\n    this.props.getUsersProfile(userId);\r\n    this.props.getStatus(userId);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.props.router.params.userId !== prevProps.router.params.userId) {\r\n      this.refreshProfile();\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        isOwner={!this.props.router.params.userId}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n        savePhoto={this.props.savePhoto}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { getUsersProfile, getStatus, updateStatus,savePhoto,saveProfile }),\r\n  withRouter\r\n)(ProfileContainer);\r\n","export const required = (value) => {\r\n    if(value){\r\n        return undefined;\r\n\r\n    }\r\n    return \"Field is required\";\r\n};\r\n\r\nexport const MaxLengthCreator = (maxLength)=> (value) => {\r\n    if(value.length>maxLength){\r\n        return `Max Length is ${maxLength} symwols`;\r\n\r\n    }\r\n    return undefined;\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__vK5vA\",\"error\":\"FormControls_error__YH6Bc\",\"formSummaryError\":\"FormControls_formSummaryError__OfMKe\"};"],"names":["FormControl","input","meta","touched","error","children","hasError","className","classes","Textarea","props","restProps","child","Input","element","CreateField","placeholder","name","validate","component","text","src","alt","message","count","maxLength10","MaxLengthCreator","MyPosts","React","postElements","post","reverse","map","id","MyPostsReduxForm","onSubmit","values","onAddPost","newDialog","reduxForm","form","handleSubmit","Field","required","connect","state","profilePage","postData","newPostText","dispatch","addPostActionCreator","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","event","currentTarget","value","onBlur","updateStatus","autoFocus","profile","style","type","Object","keys","contacts","key","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","savePhoto","saveProfile","Preloader","photos","large","userPhoto","target","files","length","initialValues","formData","then","ProfileContainer","userId","this","router","params","authorizedUserId","getUsersProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","Component","location","useLocation","navigate","useNavigate","useParams","maxLength"],"sourceRoot":""}