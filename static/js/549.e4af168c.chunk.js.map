{"version":3,"file":"static/js/549.e4af168c.chunk.js","mappings":"qTAIMA,EAAc,SAAC,GAAkD,EAAhDC,MAAiD,IAAD,IAAzCC,KAAQC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAASC,EAAe,EAAfA,SAChDC,EAAWH,GAAWC,EAC5B,OACE,iBAAKG,UAAWC,EAAAA,EAAAA,YAAsB,KAAOF,EAAWE,EAAAA,EAAAA,MAAgB,IAAxE,WACE,yBAAMH,IACLC,IAAY,0BAAOF,QAKbK,EAAW,SAACC,GACvB,IAAQT,EAAqCS,EAArCT,MAAuBU,GAAcD,EAA9BR,KAA8BQ,EAAxBE,OAArB,OAA6CF,EAA7C,IAEA,OACE,SAACV,GAAD,kBAAiBU,GAAjB,cACE,uCAAcT,GAAWU,QAKlBE,EAAQ,SAACH,GACpB,IAAQT,EAA8CS,EAA9CT,MAAgCU,GAAcD,EAAvCR,KAAuCQ,EAAjCE,MAAiCF,EAA1BI,SAA5B,OAAsDJ,EAAtD,IACA,OACE,SAACV,GAAD,kBAAiBU,GAAjB,cACE,oCAAWT,GAAWU,QAKfI,EAAc,SACzBC,EACAC,EACAC,EACAC,GAGI,IAFJT,EAEG,uDAFK,GACRU,EACG,uDADI,GAEP,OACE,4BACE,SAAC,KAAD,QACEJ,YAAaA,EACbC,KAAMA,EACNC,SAAUA,EACVC,UAAWA,GACPT,IAELU,O,qHCZDC,GAAiBC,EAAAA,EAAAA,GAAU,CAC/BC,KAAM,SADeD,EA5BL,SAAC,GAAyC,IAAvCE,EAAsC,EAAtCA,aAAcpB,EAAwB,EAAxBA,MAAOqB,EAAiB,EAAjBA,WACxC,OACE,kBAAMC,SAAUF,EAAhB,WACGT,EAAAA,EAAAA,IAAY,QAAS,QAAS,CAACY,EAAAA,GAAWd,EAAAA,KAC1CE,EAAAA,EAAAA,IAAY,WAAY,WAAY,CAACY,EAAAA,GAAWd,EAAAA,GAAO,CACtDe,KAAM,cAGPb,EAAAA,EAAAA,IACC,KACA,aACA,GACAF,EAAAA,GACA,CAAEe,KAAM,YACR,eAGDH,IAAc,gBAAKI,IAAKJ,EAAYK,IAAI,KACxCL,IACCV,EAAAA,EAAAA,IAAY,sBAAuB,UAAW,CAACY,EAAAA,GAAWd,EAAAA,IAE3DT,IAAS,gBAAKG,UAAWC,EAAAA,EAAAA,iBAAhB,SAA2CJ,KAErD,4CAqCN,WAAe2B,EAAAA,EAAAA,KANS,SAACC,GACvB,MAAO,CACLP,WAAYO,EAAMC,KAAKR,WACvBS,OAAQF,EAAMC,KAAKC,UAGiB,CAAEC,MAAAA,EAAAA,GAAOC,OAAAA,EAAAA,IAAjD,EA5Bc,SAAC1B,GAUb,OAAIA,EAAMwB,QACD,SAAC,KAAD,CAAUG,GAAI,cAIrB,4BACE,mCACA,SAAChB,EAAD,CAAgBK,SAhBH,SAACY,GAChB5B,EAAMyB,MACJG,EAASC,MACTD,EAASE,SACTF,EAASG,WACTH,EAASI,UAW2BjB,WAAYf,EAAMe,oB,4EC3DrD,IAAME,EAAW,SAACgB,GACrB,IAAGA,EAIH,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAc,SAACF,GAC3C,GAAGA,EAAMG,OAAOD,EACZ,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCTR,KAAgB,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB","sources":["Component/Common/FormsControls/FormControls.js","Component/login/Login.jsx","utils/validators/validators.js","webpack://my-app/./src/Component/Common/FormsControls/FormControls.module.css?77d8"],"sourcesContent":["import React from \"react\";\r\nimport { Field } from \"redux-form\";\r\nimport classes from \"./FormControls.module.css\";\r\n\r\nconst FormControl = ({ input, meta: { touched, error }, children }) => {\r\n  const hasError = touched && error;\r\n  return (\r\n    <div className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}>\r\n      <div>{children}</div>\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Textarea = (props) => {\r\n  const { input, meta, child, ...restProps } = props;\r\n\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FormControl >\r\n  );\r\n};\r\n\r\nexport const Input = (props) => {\r\n  const { input, meta, child, element, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const CreateField = (\r\n  placeholder,\r\n  name,\r\n  validate,\r\n  component,\r\n  props = {},\r\n  text = \"\"\r\n) => {\r\n  return (\r\n    <div>\r\n      <Field\r\n        placeholder={placeholder}\r\n        name={name}\r\n        validate={validate}\r\n        component={component}\r\n        {...props}\r\n      />\r\n      {text}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {reduxForm } from \"redux-form\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router\";\r\nimport { logout, login } from \"../../Redux/auth-reducer\";\r\nimport { required } from \"../../utils/validators/validators\";\r\nimport { CreateField, Input } from \"../Common/FormsControls/FormControls\";\r\nimport classes from \"./../Common/FormsControls/FormControls.module.css\";\r\n\r\nconst LoginForm = ({ handleSubmit, error, captchaUrl }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {CreateField(\"Email\", \"email\", [required], Input)}\r\n      {CreateField(\"Password\", \"password\", [required], Input, {\r\n        type: \"password\",\r\n      })}\r\n\r\n      {CreateField(\r\n        null,\r\n        \"rememberMe\",\r\n        [],\r\n        Input,\r\n        { type: \"Checkbox\" },\r\n        \"remember me\"\r\n      )}\r\n\r\n      {captchaUrl && <img src={captchaUrl} alt=\"\" />}\r\n      {captchaUrl &&\r\n        CreateField(\"Symbols from images\", \"captcha\", [required], Input)}\r\n\r\n      {error && <div className={classes.formSummaryError}>{error}</div>}\r\n\r\n      <button>Login</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm({\r\n  form: \"login\",\r\n})(LoginForm);\r\n\r\nconst Login = (props) => {\r\n  const onSubmit = (formData) => {\r\n    props.login(\r\n      formData.email,\r\n      formData.password,\r\n      formData.rememberMe,\r\n      formData.captcha\r\n    );\r\n  };\r\n\r\n  if (props.isAuth) {\r\n    return <Navigate to={\"/profile\"} />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\nexport default connect(mapStateToProps, { login, logout })(Login);\r\n","export const required = (value) => {\r\n    if(value){\r\n        return undefined;\r\n\r\n    }\r\n    return \"Field is required\";\r\n};\r\n\r\nexport const MaxLengthCreator = (maxLength)=> (value) => {\r\n    if(value.length>maxLength){\r\n        return `Max Length is ${maxLength} symwols`;\r\n\r\n    }\r\n    return undefined;\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__vK5vA\",\"error\":\"FormControls_error__YH6Bc\",\"formSummaryError\":\"FormControls_formSummaryError__OfMKe\"};"],"names":["FormControl","input","meta","touched","error","children","hasError","className","classes","Textarea","props","restProps","child","Input","element","CreateField","placeholder","name","validate","component","text","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","onSubmit","required","type","src","alt","connect","state","auth","isAuth","login","logout","to","formData","email","password","rememberMe","captcha","value","MaxLengthCreator","maxLength","length"],"sourceRoot":""}