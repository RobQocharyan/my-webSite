{"version":3,"file":"static/js/46.6e49c683.chunk.js","mappings":"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","sources":["webpack://my-app/./src/Component/Profile/MyPosts/MyPosts.module.css?36f8","webpack://my-app/./src/Component/Profile/MyPosts/Post/Post.module.css?9b81","Component/Profile/MyPosts/Post/Post.tsx","Component/Profile/MyPosts/MyPosts.tsx","Component/Profile/MyPosts/MyPostsConteiner.tsx","webpack://my-app/./src/Component/Profile/ProfileInfo/ProfileInfo.module.css?7111","Component/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Component/Profile/ProfileInfo/ProfileDataForm.tsx","Component/Profile/ProfileInfo/ProfileInfo.tsx","Component/Profile/Profile.tsx","Component/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"myPost\":\"MyPosts_myPost__Bpsq5\",\"posts\":\"MyPosts_posts__sUB9F\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__R3C4g\"};","import classes from \"./Post.module.css\";\r\nimport React from 'react';\r\n\r\ntype PropsType = {\r\n  message:string\r\n  count:number\r\n}\r\n\r\nconst Post:React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div className={classes.item}>\r\n      <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRbj6F59q51BqwKiBhCrcu9kWmoVXxceKCzsw&usqp=CAU\" alt=\"ads\" />\r\n      {props.message}\r\n      <div>\r\n        <span>Like {props.count}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {\r\n  MaxLengthCreator,\r\n  required,\r\n} from \"../../../utils/validators/validators\";\r\nimport { CreateField, GetStringKeys, Textarea } from \"../../Common/FormsControls/FormControls\";\r\nimport { PostDataType } from \"../../../type/type\";\r\n\r\nconst maxLength10 = MaxLengthCreator(10);\r\n\r\nexport type MyPostsPropsType = {\r\n  post:Array<PostDataType>\r\n}\r\n\r\nexport type DispatchPostsPropsType = {\r\n  onAddPost:(newDialog:string)=>void\r\n}\r\nconst MyPosts:React.FC<MyPostsPropsType & DispatchPostsPropsType> = (props) => {\r\n  let postElements = [...props.post].reverse().map((post) => {\r\n    return <Post key={post.id} message={post.message} count={post.count} />;\r\n  });\r\n\r\n  let onAddPostForm = (values:AddPostValuesFormType) => {\r\n    props.onAddPost(values.newDialog);\r\n    values.newDialog=\"\";\r\n  };\r\n\r\n  return (\r\n    <div className={classes.myPost}>\r\n      <h2>my post</h2>\r\n      <MyPostsReduxForm onSubmit={onAddPostForm} />\r\n      <div className={classes.posts}>{postElements}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype PropsType = {\r\n\r\n}\r\n\r\n\r\nexport type AddPostValuesFormType = {\r\n  newDialog:string\r\n}\r\n\r\nexport type AddPostValuesFormKeysType = GetStringKeys<AddPostValuesFormType>\r\n\r\n\r\nconst MyPostsRedux:React.FC<InjectedFormProps<AddPostValuesFormType, PropsType> & PropsType> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n      {CreateField<AddPostValuesFormKeysType>(\"Write your post!!\", \"newDialog\", [required,maxLength10], Textarea)}\r\n      </div>\r\n      <div>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst MyPostsReduxForm = reduxForm<AddPostValuesFormType,PropsType>({ form: \"dialogAddPost\" })(MyPostsRedux);\r\nconst MyPostMemorized = React.memo(MyPosts)\r\nexport default MyPostMemorized;\r\n","import { connect } from \"react-redux\";\r\nimport MyPosts, { DispatchPostsPropsType, MyPostsPropsType } from \"./MyPosts\";\r\nimport { AppStateType } from \"../../../Redux/redux-store\";\r\nimport { actions } from \"../../../Redux/profile-reducer\";\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n  return {\r\n    post: state.profilePage.postData,\r\n  };\r\n};\r\n \r\n\r\nconst MyPostsConteiner = connect<MyPostsPropsType,DispatchPostsPropsType,{},AppStateType>(mapStateToProps, {onAddPost:actions.addPostActionCreator})(MyPosts);\r\n\r\nexport default MyPostsConteiner;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"ProfileInfo_content__A-bMj\",\"status\":\"ProfileInfo_status__PZVgO\",\"mainFoto\":\"ProfileInfo_mainFoto__j2nWR\",\"contact\":\"ProfileInfo_contact__XREnv\",\"conteiner\":\"ProfileInfo_conteiner__N6QoW\",\"inputCheckbox\":\"ProfileInfo_inputCheckbox__PjsSE\",\"allDivs\":\"ProfileInfo_allDivs__nzYJR\"};","import React, {  ChangeEvent, useEffect, useState } from \"react\";\r\nimport classes from \"./ProfileInfo.module.css\";\r\n\r\n\r\ntype ProfileStatusType ={\r\n  status:string\r\n  updateStatus:(status:string)=>void\r\n}\r\n\r\nconst ProfileStatusWithHooks:React.FC<ProfileStatusType> = (props) => {\r\n  const [editMode, setEditMode] = useState<boolean>(false);\r\n  const [status, setStatus] = useState<string>(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n\r\n  const onStatusChange = (event:ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(event.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.status}>\r\n      {!editMode && (\r\n        <div>\r\n         <b>Status</b>: <span onDoubleClick={activateEditMode}>\r\n            {props.status || \"---------------\"}\r\n          </span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            onChange={onStatusChange}\r\n            value={status}\r\n            onBlur={deactivateEditMode}\r\n            autoFocus={true}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport classes from \"./ProfileInfo.module.css\";\r\nimport style from \"../../Common/FormsControls/FormControls.module.css\";\r\nimport { CreateField, GetStringKeys, Input, Textarea } from \"../../Common/FormsControls/FormControls\";\r\nimport { ProfileType } from \"../../../type/type\";\r\n\r\n\r\ntype ProfileDataFOrmPropsType = {\r\n  profile:ProfileType \r\n}\r\n\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm:React.FC<InjectedFormProps<ProfileType,ProfileDataFOrmPropsType> & ProfileDataFOrmPropsType> = ({ handleSubmit, profile, error }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n\r\n      <div className={classes.conteiner}>\r\n        <button>save</button>\r\n      </div>\r\n      {error && <div className={style.formSummaryError}>{error}</div>}\r\n      <div>\r\n        <b>Full name</b>: {CreateField<ProfileTypeKeys>(\"Full name\", \"fullName\", [] ,Input)}\r\n      </div>\r\n      <div className={classes.inputCheckbox}>\r\n       \r\n        {CreateField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [],Input , { type: \"checkbox\" })}\r\n        <b>Looking for a job</b>:\r\n      </div>\r\n      <div>\r\n        <b>My professional skills</b>:\r\n        {CreateField<ProfileTypeKeys>(\r\n          \"My professional skills\",\r\n          \"lookingForAJobDescription\",\r\n          [],\r\n          Textarea, \r\n        )}\r\n      </div>\r\n      <div>\r\n        <b>About me</b>:{CreateField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [],Textarea )}\r\n      </div>\r\n      <div>\r\n        <b>Contacts</b>:\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          return (\r\n            <div key={key} className={classes.contact}>\r\n              <b>\r\n                {/* {todo create some solution for embedded objects} */}\r\n                {key}:{CreateField(key, \"contacts.\" + key,[] ,Input )}\r\n              </b>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </form>\r\n\r\n  );\r\n};\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType,ProfileDataFOrmPropsType>({ form: \"edit-profile\" })(\r\n  ProfileDataForm\r\n);\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import React, { ChangeEvent, useState } from \"react\";\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\n\r\nimport classes from \"./ProfileInfo.module.css\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/img/user.jpg\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport { ContactsType, ProfileType } from \"../../../type/type\";\r\n\r\ntype PropsType = {\r\n  profile:ProfileType\r\n  status:string\r\n  updateStatus:(status:string)=>void\r\n  isOwner:boolean\r\n  savePhoto:(file:File)=>void\r\n  saveProfile:(profile:ProfileType)=>Promise<void>\r\n}\r\n\r\nconst ProfileInfo:React.FC<PropsType> = ({\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  isOwner,\r\n  savePhoto,\r\n  saveProfile,\r\n}) => {\r\n\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const onMainPhotoSelected = (event:ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.files?.length) {\r\n      savePhoto(event.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (formData:ProfileType) => {\r\n    //todo: remove then \r\n    saveProfile(formData).then(()=>{\r\n      setEditMode(false)\r\n    })\r\n    };\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.content}>\r\n        <img\r\n          src={profile.photos.large || userPhoto}\r\n          alt=\"images\"\r\n          className={classes.mainFoto}\r\n        />\r\n        {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\r\n\r\n        {editMode ? (\r\n          <ProfileDataForm\r\n            initialValues={profile}\r\n            profile={profile}\r\n            onSubmit={onSubmit}\r\n          />\r\n        ) : (\r\n          <ProfileData\r\n            profile={profile}\r\n            isOwner={isOwner}\r\n            goToEditMode={() => {\r\n              setEditMode(true);\r\n            }}\r\n          />\r\n        )}\r\n\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype ProfileDataPropsType = {\r\n  profile:ProfileType\r\n  isOwner:boolean\r\n  goToEditMode:()=>void \r\n}\r\n\r\nconst ProfileData:React.FC<ProfileDataPropsType> = ({ profile, isOwner, goToEditMode }) => {\r\n  return (\r\n    <div className={classes.allDivs}>\r\n      {isOwner && (\r\n        <div>\r\n          <button onClick={goToEditMode}>edit</button>\r\n        </div>\r\n      )}\r\n      <div>\r\n        <b>Full name</b>: {profile.fullName}\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n      </div>\r\n      {profile.lookingForAJob && (\r\n        <div>\r\n          <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n      )}\r\n      <div>\r\n        <b>About me</b>: {profile.aboutMe}\r\n      </div>\r\n      <div>\r\n        <b>Contacts</b>:{\" \"}\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          return (\r\n            <Contact\r\n              key={key}\r\n              contactTitle={key}\r\n              contactValue={profile.contacts[key as keyof ContactsType]}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype ContactPropsType = {\r\n  contactTitle:string \r\n  contactValue:string\r\n}\r\n\r\nconst Contact:React.FC<ContactPropsType> = ({ contactTitle, contactValue }) => {\r\n  return (\r\n    <div className={classes.contact}>\r\n      <b>{contactTitle}</b>: {contactValue}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","\r\nimport React from 'react';  \r\nimport { ProfileType } from '../../type/type';\r\n\r\nimport MyPostsConteiner from \"./MyPosts/MyPostsConteiner\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\n\r\n\r\ntype PropsType  = {\r\n  profile:any\r\n  status:string\r\n  updateStatus:(status:string)=>void\r\n  isOwner:boolean\r\n  savePhoto:(file:File)=>void\r\n  saveProfile:(profile:ProfileType)=>Promise<void>\r\n}\r\n\r\nconst Profile:React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo savePhoto={props.savePhoto}  isOwner={props.isOwner}  profile={props.profile} status={props.status} updateStatus={props.updateStatus} saveProfile={props.saveProfile} />\r\n      <MyPostsConteiner  />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getStatus,\r\n  getUsersProfile,\r\n  savePhoto,\r\n  saveProfile,\r\n  updateStatus,\r\n} from \"../../Redux/profile-reducer\";\r\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\r\nimport Profile from \"./Profile\";\r\nimport { compose } from \"redux\";\r\nimport { AppStateType } from \"../../Redux/redux-store\";\r\nimport { ProfileType } from \"../../type/type\";\r\n\r\n\r\nfunction withRouter(Component:any) {\r\n  function ComponentWithRouterProp(props:any) {\r\n    let location = useLocation();\r\n    let navigate = useNavigate();\r\n    let params = useParams();\r\n    return <Component {...props} router={{ location, navigate, params }} />;\r\n  }\r\n\r\n  return ComponentWithRouterProp;\r\n}\r\n\r\n\r\n\r\n\r\ntype  MapDispatchPropsType ={\r\n  getUsersProfile:(userId:number)=>void \r\n  getStatus:(userId:number)=>void\r\n  updateStatus:(text:string)=>void\r\n  savePhoto:(file:File)=>void\r\n  saveProfile:(Profile:ProfileType)=>void\r\n\r\n}\r\n\r\n\r\ntype  PathParamsType = {\r\n  router:any\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & PathParamsType;\r\n\r\nclass ProfileContainer extends React.Component<PropsType>{\r\n\r\n  refreshProfile() {\r\n\r\n    let userId:number  | null= this.props.router.params.userId;\r\n\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        // todo may be replace push withredirect\r\n        // this.props.history.push(\"/login\"); \r\n      }\r\n    }\r\n\r\n    if(!userId){\r\n      console.error(\"Id should existid in URL params or  on the state ('authorizedUserId')\")\r\n    }else{\r\n      this.props.getUsersProfile(userId);\r\n      this.props.getStatus(userId);\r\n    }\r\n \r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(prevProps:PropsType, prevState:PropsType) {\r\n    if (this.props.router.params.userId !== prevProps.router.params.userId) {\r\n      this.refreshProfile();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount():void{\r\n    \r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <Profile\r\n        isOwner={!this.props.router.params.userId}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus} savePhoto={function (file: File): void {\r\n          throw new Error(\"Function not implemented.\");\r\n        } } saveProfile={function (profile: ProfileType): Promise<void> {\r\n          throw new Error(\"Function not implemented.\");\r\n        } }         />\r\n    );\r\n  }\r\n}\r\n\r\ntype  MapStatePropsType =ReturnType<typeof mapStatePropsType>\r\nlet mapStatePropsType = (state:AppStateType) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStatePropsType, { getUsersProfile, getStatus, updateStatus,savePhoto,saveProfile }),\r\n  withRouter\r\n)(ProfileContainer);\r\n"],"names":["props","className","classes","src","alt","message","count","maxLength10","MaxLengthCreator","MyPosts","postElements","post","reverse","map","id","MyPostsReduxForm","onSubmit","values","onAddPost","newDialog","reduxForm","form","handleSubmit","CreateField","required","Textarea","React","connect","state","profilePage","postData","actions","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","event","currentTarget","value","onBlur","updateStatus","autoFocus","profile","error","style","Input","type","Object","keys","contacts","key","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","savePhoto","saveProfile","Preloader","photos","large","userPhoto","target","files","length","initialValues","formData","then","ProfileContainer","userId","this","router","params","authorizedUserId","getUsersProfile","getStatus","console","refreshProfile","prevProps","prevState","file","Error","compose","auth","isAuth","Component","location","useLocation","navigate","useNavigate","useParams"],"sourceRoot":""}