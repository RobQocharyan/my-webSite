{"version":3,"file":"static/js/213.3e6d3908.chunk.js","mappings":"oOAYMA,GAAcC,EAAAA,EAAAA,GAAiB,IAkBnC,GAAeC,EAAAA,EAAAA,GAA8B,CAAEC,KAAM,2BAArD,EAd2F,SAACC,GAC1F,OACE,kBAAMC,SAAUD,EAAME,aAAtB,WACE,0BAEDC,EAAAA,EAAAA,IAA0C,uBAAwB,cAAe,CAACC,EAAAA,EAASR,GAAcS,EAAAA,OAExG,0BACE,iDCvBV,EAA0B,yBAA1B,EAAiE,6BAAjE,EAAuG,wBAAvG,EAAwI,wBAAxI,EAA2K,0BAA3K,EAA+M,yB,UCwB/M,EAfwC,SAACL,GACvC,OACE,gBAAKM,UAAWC,EAAhB,UACE,SAAC,KAAD,CACEC,GAAIR,EAAMS,GACVH,UAAW,SAACI,GAAD,OAAQA,EAAEC,SAAWJ,EAAiB,IAFnD,SAIGP,EAAMY,UCJf,EAJyC,SAACZ,EAAMS,GAC9C,OAAO,gBAAcH,UAAWC,EAAzB,SAA2CP,EAAMa,SAAvCJ,IC2CjB,EA9BoC,SAACT,GACnC,IAAIc,EAAQd,EAAMe,WACdC,EAAiBF,EAAMG,YAAYC,KAAI,SAACC,GAC1C,OAAO,SAAC,EAAD,CAAaP,KAAMO,EAAOP,KAAMH,GAAIU,EAAOV,QAGhDW,EAAkBN,EAAMO,aAAaH,KAAI,SAACI,GAC5C,OAAO,SAAC,EAAD,CAAoCT,QAASS,EAAOC,SAAUd,GAAI,GAA/Ca,EAAOC,aAQnC,OAAIvB,EAAMwB,QACD,SAAC,KAAD,CAAUhB,GAAG,aAGpB,iBAAKF,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,SAAsCS,KACtC,iBAAKV,UAAWC,EAAhB,UACGa,GACD,SAAC,EAAD,CAAgBnB,SAZF,SAACwB,GACnBzB,EAAM0B,YAAYD,EAAOE,aACzBF,EAAOE,YAAY,a,uBC/BrBC,EAA0B,SAACd,GAC3B,MAAO,CACLU,OAAQV,EAAMe,KAAKL,S,wBCgBzB,GAAeM,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KARoB,SAACjB,GACrB,MAAO,CACLC,WAAYD,EAAMC,eAMb,UACHiB,EAAAA,KDPC,SAA+BC,GAWhC,OAFkCF,EAAAA,EAAAA,IAAmEH,EAAnEG,EAR2C,SAAC/B,GAC9E,IAAKwB,EAAuBxB,EAAvBwB,OAAUU,GAAf,OAA4BlC,EAA5B,GACM,OAAIwB,GACO,SAAC,KAAD,CAAUhB,GAAG,YAEjB,SAACyB,GAAD,UAAeC,SCDlC,CAKEC","sources":["Component/Dialogs/AddMessageForm/AddMessageForm.tsx","webpack://my-app/./src/Component/Dialogs/Dialogs.module.css?ac53","Component/Dialogs/DialogsItem/DialogsItem.tsx","Component/Dialogs/MessagesItem/MessagesItem.tsx","Component/Dialogs/Dialogs.tsx","Component/Hoc/withAuthNavigate.tsx","Component/Dialogs/DialogsConteiner.tsx"],"sourcesContent":["import { reduxForm,InjectedFormProps } from 'redux-form';\r\nimport { MaxLengthCreator, required } from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../Common/FormsControls/FormControls\";\r\nimport { NewMessageFormType } from '../Dialogs';\r\nimport { CreateField } from './../../Common/FormsControls/FormControls';\r\n\r\n\r\n\r\n// type PropsType = {\r\n//   handleSubmit:(value:string)=>void\r\n// }\r\n\r\nconst maxLength50 = MaxLengthCreator(50)\r\nexport type NewMessageFormValuesKeysType = Extract<keyof NewMessageFormType,string>\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm:React.FC<InjectedFormProps<NewMessageFormType,PropsType> & PropsType> = (props) => {\r\n    return (\r\n      <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n\r\n      {CreateField<NewMessageFormValuesKeysType>(\"Write your message!!\", \"newMessages\", [required,maxLength50], Textarea)}\r\n        </div>\r\n        <div>\r\n          <button>Add post</button>\r\n        </div>\r\n      </form>\r\n    );\r\n  };\r\n  \r\n  export default reduxForm<NewMessageFormType>({ form: \"dialog-add-message-form\" })(\r\n    AddMessageForm\r\n  );","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__uJl+q\",\"dialogsItem\":\"Dialogs_dialogsItem__kjfip\",\"dialog\":\"Dialogs_dialog__4EMdD\",\"active\":\"Dialogs_active__xBp4i\",\"messages\":\"Dialogs_messages__RhrvC\",\"message\":\"Dialogs_message__Qj8Ro\"};","import { NavLink } from \"react-router-dom\";\r\nimport classes from \".././Dialogs.module.css\";\r\nimport React from 'react';  \r\n\r\ntype PropsType= {\r\n  id:string \r\n  name:string\r\n\r\n}\r\n\r\nconst DialogsItem:React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div className={classes.dialog}>\r\n      <NavLink\r\n        to={props.id}\r\n        className={(a) => (a.isActive ? classes.active : \"\")}\r\n      >\r\n        {props.name}\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default DialogsItem;\r\n","import classes from \".././Dialogs.module.css\";\r\nimport React from 'react';  \r\n\r\n\r\ntype PropsType= {\r\n    message:string\r\n    id:number\r\n}\r\n\r\nconst MessagesItem:React.FC<PropsType> = (props,id) => {\r\n  return <div key={id} className={classes.message}>{props.message}</div>;\r\n};\r\n\r\nexport default MessagesItem;\r\n","  import React from \"react\";\r\n\r\n  import { Navigate } from \"react-router\";\r\nimport { IniinitialStateType } from \"../../Redux/dialog-reducer\";\r\n  import AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n  import classes from \"./Dialogs.module.css\";\r\n  import DialogsItem from \"./DialogsItem/DialogsItem\";\r\n  import MessagesItem from \"./MessagesItem/MessagesItem\";\r\n\r\n\r\n  export type NewMessageFormType = {\r\n    newMessages:string\r\n  }\r\n  \r\n\r\n\r\n  type PropsType = {\r\n    isAuth: boolean;\r\n    dialogPage:IniinitialStateType\r\n    sendMessage:(newMessages:string)=>void\r\n  }\r\n\r\n\r\n  const Dialogs:React.FC<PropsType> = (props) => {\r\n    let state = props.dialogPage;\r\n    let dialogElements = state.dialogsData.map((dialog:any) => {\r\n      return <DialogsItem name={dialog.name} id={dialog.id} />;\r\n    });\r\n\r\n    let messagesElement = state.messagesData.map((messag) => {\r\n      return <MessagesItem key={messag.messages} message={messag.messages} id={0} />;\r\n    });\r\n\r\n\r\n    let addNewMessage = (values:{newMessages:string}) => {\r\n      props.sendMessage(values.newMessages);\r\n      values.newMessages=\"\";\r\n    };\r\n    if (props.isAuth) {\r\n      return <Navigate to=\"/dialog\" />;\r\n    }\r\n    return (\r\n      <div className={classes.dialogs}>\r\n        <div className={classes.dialogsItem}>{dialogElements}</div>\r\n        <div className={classes.messages}>\r\n          {messagesElement}\r\n          <AddMessageForm onSubmit={addNewMessage} />\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n\r\n  export default Dialogs;\r\n","import React, { ComponentType } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from 'react-router';\r\nimport { AppStateType } from \"../../Redux/redux-store\";\r\n\r\nlet mapStateToPropsNavigate = (state:AppStateType) => {\r\n    return {\r\n      isAuth: state.auth.isAuth,\r\n    };\r\n  };\r\n\r\n  type MapStateToPropsType = {\r\n      isAuth:boolean\r\n  }\r\n  \r\n  type MapDispatchPropsType = {\r\n}\r\n\r\nexport function withAuthNavigate<WCP>(Component:ComponentType<WCP>){\r\n    const NavigateComponent:React.FC<MapDispatchPropsType & MapStateToPropsType> = (props)=>{\r\n      let {isAuth,...restProps} = props\r\n            if (isAuth) {\r\n                return <Navigate to=\"/login\" />\r\n              }\r\n            return <Component {...restProps as unknown as  WCP}/>\r\n    }\r\n   \r\n      let ConectedAuthNavigateComponent=connect<MapStateToPropsType,MapDispatchPropsType,WCP,AppStateType>(mapStateToPropsNavigate)(NavigateComponent);\r\n\r\n      return ConectedAuthNavigateComponent;\r\n  }\r\n\r\n","import { connect } from \"react-redux\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { withAuthNavigate } from \"../Hoc/withAuthNavigate\";\r\nimport { compose, Dispatch } from \"redux\";\r\nimport { actions } from \"../../Redux/dialog-reducer\";\r\n\r\ntype MapStateType = {\r\n  dialogPage:Array<string>\r\n}\r\n\r\ntype MapDispatchType = {\r\n  sendMessage:(newMessages:string)=>void\r\n}\r\n\r\ntype PropsType = MapStateType &MapDispatchType;\r\n\r\nlet mapStateToProps = (state:MapStateType):MapStateType => {\r\n  return {\r\n    dialogPage: state.dialogPage,\r\n  };\r\n};\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, {\r\n   ...actions\r\n  }),\r\n  withAuthNavigate\r\n)(Dialogs);\r\n"],"names":["maxLength50","MaxLengthCreator","reduxForm","form","props","onSubmit","handleSubmit","CreateField","required","Textarea","className","classes","to","id","a","isActive","name","message","state","dialogPage","dialogElements","dialogsData","map","dialog","messagesElement","messagesData","messag","messages","isAuth","values","sendMessage","newMessages","mapStateToPropsNavigate","auth","compose","connect","actions","Component","restProps","Dialogs"],"sourceRoot":""}